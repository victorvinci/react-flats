{"version":3,"sources":["data/flatsData.js","components/Flat-Card/flatCard.js","components/Flats-List/flatList.js","components/Map/map.js","components/App/App.js","serviceWorker.js","index.js"],"names":["flatsData","name","imageUrl","price","priceCurrency","lat","lng","Flat","props","react_default","a","createElement","className","concat","selected","onClick","selectFlat","index","currency","alt","src","href","FlatList","flatList","_this","map","flatData","flatCard","key","selectedFlat","this","Component","MapMarker","Map","lib_default","defaultCenter","center","defaultZoom","map_MapMarker","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","setState","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdb34d45.chunk.js","sourcesContent":["const flatsData = [\n  {\n    name: \"Charm at the Steps of the Sacre Coeur/Montmartre\",\n    imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat1.jpg\",\n    price: 164,\n    priceCurrency: \"EUR\",\n    lat: 48.884211,\n    lng: 2.34689\n  },\n  {\n    name: \"Trendy Apt in Buttes Montmartre\",\n    imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat2.jpg\",\n    price: 200,\n    priceCurrency: \"EUR\",\n    lat: 48.885707,\n    lng: 2.343543\n  },\n  {\n    name: \"Super 60m2 in trendy neighborhood!\",\n    imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat3.jpg\",\n    price: 150,\n    priceCurrency: \"EUR\",\n    lat: 48.885312,\n    lng: 2.341225\n  },\n  {\n    name: \"Splendide terrasse vue imprenable\",\n    imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat4.jpg\",\n    price: 115,\n    priceCurrency: \"EUR\",\n    lat: 48.88184,\n    lng: 2.343371\n  },\n  {\n    name: \"Superbe vue à 2 min du Sacré Coeur\",\n    imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat5.jpg\",\n    price: 135,\n    priceCurrency: \"EUR\",\n    lat: 48.888839,\n    lng: 2.339208\n  },\n  {\n    name: \"Bohemian and Chic in Paris\",\n    imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat6.jpg\",\n    price: 90,\n    priceCurrency: \"EUR\",\n    lat: 48.827855,\n    lng: 2.350774\n  }\n];\n\nexport default flatsData;","import React from 'react';\n\nconst Flat = (props) => {\n  const selectFlatFunction = () => {\n    props.selectFlat(props.index)\n  }\n\n\n  return (  \n    <div className={`card${props.selected ? ' active' : ''}`} onClick={selectFlatFunction}>\n      <h2 className=\"card-title\">{props.name}</h2>\n      <p className=\"card-price\">{props.price} {props.currency}</p>\n      <img className=\"card-img\" alt=\"\" src={props.imageUrl}></img>\n      <a className=\"card-link\" href=\"#\"></a>\n    </div>\n   );\n}\n \nexport default Flat;","import React, { Component } from 'react';\n\nimport Flat from '../Flat-Card/flatCard'\n\nclass FlatList extends Component {\n  \n  flatList = () =>  { return this.props.flatsData.map((flatData, index) => {\n    return (\n      <Flat name={flatData.name} \n            price={flatData.price} \n            currency={flatData.priceCurrency} \n            imageUrl={flatData.imageUrl} \n            lat={flatData.lat} \n            lng={flatData.lng}\n            key={flatData.lat}\n            selectFlat={this.props.selectFlat}\n            index={index}\n            selected={flatData.name === this.props.selectedFlat.name}\n      />\n    )\n  })}\n\n  render() { \n      \n    return (\n      <div className=\"flats-list\">\n        {this.flatList()}\n      </div>\n    )\n  }\n}\n \nexport default FlatList;","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nconst  MapMarker = (props) => <div className=\"marker\">{props.name}</div>;\n\nclass Map extends Component {\n  render() { \n    return ( \n      <div className=\"map-container\">\n        <GoogleMapReact defaultCenter={this.props.center()} defaultZoom={12}>\n          <MapMarker lat={this.props.lat} lng={this.props.lng} name={this.props.name}/>\n        </GoogleMapReact>\n      </div>\n     );\n  }\n}\n \nexport default Map;","import React, { Component } from 'react';\n\nimport flatsData from '../../data/flatsData';\nimport FlatList from \"../Flats-List/flatList\"\nimport Map from \"../Map/map\"\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      selectedFlat: flatsData[0]\n     }\n  }\n\n  center = () => {\n    return {\n        lat: this.state.selectedFlat.lat,\n        lng: this.state.selectedFlat.lng\n    };\n  }\n\n  selectFlat = (index) => {\n    this.setState({\n      selectedFlat: flatsData[index]\n    });\n  }\n\n  render() { \n    return (\n      <div>\n        <div className=\"flats-list-container\">\n          <FlatList flatsData={flatsData} selectFlat={this.selectFlat} selectedFlat={this.state.selectedFlat}/>\n        </div>\n        <Map center={this.center} lat={this.state.selectedFlat.lat} lng={this.state.selectedFlat.lng} name={this.state.selectedFlat.name}/>\n      </div>\n    );\n  }\n}\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}